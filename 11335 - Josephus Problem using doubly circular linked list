#include <stdlib.h>
#include <stdio.h>
typedef struct _Node{
    int number;
    struct _Node* next;
    struct _Node* prev;
}Node;

Node *head; 

Node* createList(int n)
{
	Node *va;
	va = (Node*)malloc(sizeof(Node));
	Node *head;
	head = va;
	va->number = 1;
	
	int i;
	for(i=2;i<=n;i++)
	{
		va->next = (Node *)malloc(sizeof(Node));
		va->next->prev = va;
		va = va->next;
		va->number = i;
	}
	va->next = head;
	head->prev = va;
	
//	Node *vb;
//	vb = (Node*)malloc(sizeof(Node));
//	va->next = vb;
//	int i;
//	//printf("***");
//	for(i=2;i<=n;i++)
//	{
//		//printf("***\n");
//		vb->number = i;
//		vb->next = (Node*)malloc(sizeof(Node));
//		vb->next->prev = vb;
//		
//		vb = vb->next;
//	}
//	vb = va;
//	va->prev = vb;
	
//	for(i=0;i<2 * n;i++)
//	{
//		printf("%d ",head->number);
//		head = head->next;
//	}
	return head ;
 } 
 
int solveJosephus(int step)
{
	Node *now = head;
	int direction = 1;
	Node *to_kill;
	
	while(now->next!=now)
	{
		if(direction==1)
		{
			int j;
			for(j=1;j<=step-1;j++)
			{
				now = now->next;
				to_kill = now;
			}
			now = now->prev;
		}
		else
		{
			//printf("///\n"); 
			int k;
			for(k=1;k<=step-1;k++)
			{
				now = now->prev;
				to_kill = now;
			}
			now = now->next;
		}

		to_kill->next->prev = to_kill->prev;
		to_kill->prev->next = to_kill->next;
		direction = -direction;

	}

	return now->number;
}

void freeList()
{
	free(head);
}

int main(){

    int n, m;

    while(scanf("%d%d", &n, &m)!=EOF){
        head = createList(n);
        printf("%d\n", solveJosephus(m));
        freeList();
    }

    return 0;
}
